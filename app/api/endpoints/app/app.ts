/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

export const appControllerGetApi = (options?: AxiosRequestConfig): Promise<AxiosResponse<null>> => {
  return axios.get(`/api`, options);
};

export const getAppControllerGetApiQueryKey = () => {
  return [`/api`] as const;
};

export const getAppControllerGetApiQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetApi>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetApi>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetApiQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetApi>>> = ({ signal }) =>
    appControllerGetApi({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetApi>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AppControllerGetApiQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetApi>>
>;
export type AppControllerGetApiQueryError = AxiosError<unknown>;

export function useAppControllerGetApi<
  TData = Awaited<ReturnType<typeof appControllerGetApi>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof appControllerGetApi>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetApi>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetApi>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAppControllerGetApi<
  TData = Awaited<ReturnType<typeof appControllerGetApi>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof appControllerGetApi>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetApi>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetApi>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAppControllerGetApi<
  TData = Awaited<ReturnType<typeof appControllerGetApi>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof appControllerGetApi>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAppControllerGetApi<
  TData = Awaited<ReturnType<typeof appControllerGetApi>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof appControllerGetApi>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAppControllerGetApiQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAppControllerGetApiSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetApi>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof appControllerGetApi>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetApiQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetApi>>> = ({ signal }) =>
    appControllerGetApi({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetApi>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AppControllerGetApiSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetApi>>
>;
export type AppControllerGetApiSuspenseQueryError = AxiosError<unknown>;

export function useAppControllerGetApiSuspense<
  TData = Awaited<ReturnType<typeof appControllerGetApi>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof appControllerGetApi>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAppControllerGetApiSuspense<
  TData = Awaited<ReturnType<typeof appControllerGetApi>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof appControllerGetApi>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAppControllerGetApiSuspense<
  TData = Awaited<ReturnType<typeof appControllerGetApi>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof appControllerGetApi>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAppControllerGetApiSuspense<
  TData = Awaited<ReturnType<typeof appControllerGetApi>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof appControllerGetApi>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAppControllerGetApiSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
