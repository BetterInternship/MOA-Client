/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import { preconfiguredAxios } from "../../../../preconfig.axios";

export const schoolEntitiesControllerGetMyPartners = (signal?: AbortSignal) => {
  return preconfiguredAxios<null>({ url: `/api/school/entities/me`, method: "GET", signal });
};

export const getSchoolEntitiesControllerGetMyPartnersQueryKey = () => {
  return [`/api/school/entities/me`] as const;
};

export const getSchoolEntitiesControllerGetMyPartnersQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolEntitiesControllerGetMyPartnersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>
  > = ({ signal }) => schoolEntitiesControllerGetMyPartners(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolEntitiesControllerGetMyPartnersQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>
>;
export type SchoolEntitiesControllerGetMyPartnersQueryError = unknown;

export function useSchoolEntitiesControllerGetMyPartners<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
          TError,
          Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetMyPartners<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
          TError,
          Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetMyPartners<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolEntitiesControllerGetMyPartners<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolEntitiesControllerGetMyPartnersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchoolEntitiesControllerGetMyPartnersSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolEntitiesControllerGetMyPartnersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>
  > = ({ signal }) => schoolEntitiesControllerGetMyPartners(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolEntitiesControllerGetMyPartnersSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>
>;
export type SchoolEntitiesControllerGetMyPartnersSuspenseQueryError = unknown;

export function useSchoolEntitiesControllerGetMyPartnersSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetMyPartnersSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetMyPartnersSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolEntitiesControllerGetMyPartnersSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolEntitiesControllerGetMyPartnersSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const schoolEntitiesControllerGetMyRequests = (signal?: AbortSignal) => {
  return preconfiguredAxios<null>({ url: `/api/school/entities/requests`, method: "GET", signal });
};

export const getSchoolEntitiesControllerGetMyRequestsQueryKey = () => {
  return [`/api/school/entities/requests`] as const;
};

export const getSchoolEntitiesControllerGetMyRequestsQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolEntitiesControllerGetMyRequestsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>
  > = ({ signal }) => schoolEntitiesControllerGetMyRequests(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolEntitiesControllerGetMyRequestsQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>
>;
export type SchoolEntitiesControllerGetMyRequestsQueryError = unknown;

export function useSchoolEntitiesControllerGetMyRequests<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
          TError,
          Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetMyRequests<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
          TError,
          Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetMyRequests<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolEntitiesControllerGetMyRequests<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolEntitiesControllerGetMyRequestsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchoolEntitiesControllerGetMyRequestsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolEntitiesControllerGetMyRequestsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>
  > = ({ signal }) => schoolEntitiesControllerGetMyRequests(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolEntitiesControllerGetMyRequestsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>
>;
export type SchoolEntitiesControllerGetMyRequestsSuspenseQueryError = unknown;

export function useSchoolEntitiesControllerGetMyRequestsSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetMyRequestsSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetMyRequestsSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolEntitiesControllerGetMyRequestsSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetMyRequests>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolEntitiesControllerGetMyRequestsSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const schoolEntitiesControllerGetRequest = (
  id: string | undefined | null,
  signal?: AbortSignal
) => {
  return preconfiguredAxios<null>({
    url: `/api/school/entities/requests/${id}`,
    method: "GET",
    signal,
  });
};

export const getSchoolEntitiesControllerGetRequestQueryKey = (id?: string | undefined | null) => {
  return [`/api/school/entities/requests/${id}`] as const;
};

export const getSchoolEntitiesControllerGetRequestQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolEntitiesControllerGetRequestQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>> = ({
    signal,
  }) => schoolEntitiesControllerGetRequest(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolEntitiesControllerGetRequestQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>
>;
export type SchoolEntitiesControllerGetRequestQueryError = unknown;

export function useSchoolEntitiesControllerGetRequest<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
          TError,
          Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetRequest<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
          TError,
          Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetRequest<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolEntitiesControllerGetRequest<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolEntitiesControllerGetRequestQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchoolEntitiesControllerGetRequestSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolEntitiesControllerGetRequestQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>> = ({
    signal,
  }) => schoolEntitiesControllerGetRequest(id, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolEntitiesControllerGetRequestSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>
>;
export type SchoolEntitiesControllerGetRequestSuspenseQueryError = unknown;

export function useSchoolEntitiesControllerGetRequestSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetRequestSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolEntitiesControllerGetRequestSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolEntitiesControllerGetRequestSuspense<
  TData = Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolEntitiesControllerGetRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolEntitiesControllerGetRequestSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const schoolEntitiesControllerApproveRequest = (
  id: string | undefined | null,
  signal?: AbortSignal
) => {
  return preconfiguredAxios<null>({
    url: `/api/school/entities/requests/${id}/approve`,
    method: "POST",
    signal,
  });
};

export const getSchoolEntitiesControllerApproveRequestMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolEntitiesControllerApproveRequest>>,
    TError,
    { id: string | undefined | null },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof schoolEntitiesControllerApproveRequest>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ["schoolEntitiesControllerApproveRequest"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolEntitiesControllerApproveRequest>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {};

    return schoolEntitiesControllerApproveRequest(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SchoolEntitiesControllerApproveRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolEntitiesControllerApproveRequest>>
>;

export type SchoolEntitiesControllerApproveRequestMutationError = unknown;

export const useSchoolEntitiesControllerApproveRequest = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof schoolEntitiesControllerApproveRequest>>,
      TError,
      { id: string | undefined | null },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof schoolEntitiesControllerApproveRequest>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getSchoolEntitiesControllerApproveRequestMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const schoolEntitiesControllerDenyRequest = (
  id: string | undefined | null,
  signal?: AbortSignal
) => {
  return preconfiguredAxios<null>({
    url: `/api/school/entities/requests/${id}/deny`,
    method: "POST",
    signal,
  });
};

export const getSchoolEntitiesControllerDenyRequestMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolEntitiesControllerDenyRequest>>,
    TError,
    { id: string | undefined | null },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof schoolEntitiesControllerDenyRequest>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ["schoolEntitiesControllerDenyRequest"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolEntitiesControllerDenyRequest>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {};

    return schoolEntitiesControllerDenyRequest(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SchoolEntitiesControllerDenyRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolEntitiesControllerDenyRequest>>
>;

export type SchoolEntitiesControllerDenyRequestMutationError = unknown;

export const useSchoolEntitiesControllerDenyRequest = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof schoolEntitiesControllerDenyRequest>>,
      TError,
      { id: string | undefined | null },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof schoolEntitiesControllerDenyRequest>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getSchoolEntitiesControllerDenyRequestMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
