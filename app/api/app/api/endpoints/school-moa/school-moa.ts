/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type { RequestNewMoaDto } from "../../models";

import { preconfiguredAxios } from "../../../../preconfig.axios";

export const schoolMoaControllerGetMine = (signal?: AbortSignal) => {
  return preconfiguredAxios<null>({ url: `/api/school/moa/me`, method: "GET", signal });
};

export const getSchoolMoaControllerGetMineQueryKey = () => {
  return [`/api/school/moa/me`] as const;
};

export const getSchoolMoaControllerGetMineQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolMoaControllerGetMineQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>> = ({
    signal,
  }) => schoolMoaControllerGetMine(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolMoaControllerGetMineQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolMoaControllerGetMine>>
>;
export type SchoolMoaControllerGetMineQueryError = unknown;

export function useSchoolMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
          TError,
          Awaited<ReturnType<typeof schoolMoaControllerGetMine>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
          TError,
          Awaited<ReturnType<typeof schoolMoaControllerGetMine>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolMoaControllerGetMineQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchoolMoaControllerGetMineSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolMoaControllerGetMineQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>> = ({
    signal,
  }) => schoolMoaControllerGetMine(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolMoaControllerGetMineSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolMoaControllerGetMine>>
>;
export type SchoolMoaControllerGetMineSuspenseQueryError = unknown;

export function useSchoolMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolMoaControllerGetMineSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const schoolMoaControllerRequestNew = (
  requestNewMoaDto: RequestNewMoaDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxios<null>({
    url: `/api/school/moa/request`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: requestNewMoaDto,
    signal,
  });
};

export const getSchoolMoaControllerRequestNewMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolMoaControllerRequestNew>>,
    TError,
    { data: RequestNewMoaDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof schoolMoaControllerRequestNew>>,
  TError,
  { data: RequestNewMoaDto },
  TContext
> => {
  const mutationKey = ["schoolMoaControllerRequestNew"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolMoaControllerRequestNew>>,
    { data: RequestNewMoaDto }
  > = (props) => {
    const { data } = props ?? {};

    return schoolMoaControllerRequestNew(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SchoolMoaControllerRequestNewMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolMoaControllerRequestNew>>
>;
export type SchoolMoaControllerRequestNewMutationBody = RequestNewMoaDto;
export type SchoolMoaControllerRequestNewMutationError = unknown;

export const useSchoolMoaControllerRequestNew = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof schoolMoaControllerRequestNew>>,
      TError,
      { data: RequestNewMoaDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof schoolMoaControllerRequestNew>>,
  TError,
  { data: RequestNewMoaDto },
  TContext
> => {
  const mutationOptions = getSchoolMoaControllerRequestNewMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const schoolMoaControllerGetOneHistory = (
  id: string | undefined | null,
  signal?: AbortSignal
) => {
  return preconfiguredAxios<null>({ url: `/api/school/moa/history/${id}`, method: "GET", signal });
};

export const getSchoolMoaControllerGetOneHistoryQueryKey = (id?: string | undefined | null) => {
  return [`/api/school/moa/history/${id}`] as const;
};

export const getSchoolMoaControllerGetOneHistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolMoaControllerGetOneHistoryQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>> = ({
    signal,
  }) => schoolMoaControllerGetOneHistory(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolMoaControllerGetOneHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>
>;
export type SchoolMoaControllerGetOneHistoryQueryError = unknown;

export function useSchoolMoaControllerGetOneHistory<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
          TError,
          Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetOneHistory<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
          TError,
          Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetOneHistory<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolMoaControllerGetOneHistory<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolMoaControllerGetOneHistoryQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchoolMoaControllerGetOneHistorySuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolMoaControllerGetOneHistoryQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>> = ({
    signal,
  }) => schoolMoaControllerGetOneHistory(id, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolMoaControllerGetOneHistorySuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>
>;
export type SchoolMoaControllerGetOneHistorySuspenseQueryError = unknown;

export function useSchoolMoaControllerGetOneHistorySuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetOneHistorySuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetOneHistorySuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolMoaControllerGetOneHistorySuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolMoaControllerGetOneHistory>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolMoaControllerGetOneHistorySuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const schoolMoaControllerGetOne = (id: string | undefined | null, signal?: AbortSignal) => {
  return preconfiguredAxios<null>({ url: `/api/school/moa/${id}`, method: "GET", signal });
};

export const getSchoolMoaControllerGetOneQueryKey = (id?: string | undefined | null) => {
  return [`/api/school/moa/${id}`] as const;
};

export const getSchoolMoaControllerGetOneQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolMoaControllerGetOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>> = ({
    signal,
  }) => schoolMoaControllerGetOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolMoaControllerGetOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolMoaControllerGetOne>>
>;
export type SchoolMoaControllerGetOneQueryError = unknown;

export function useSchoolMoaControllerGetOne<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
          TError,
          Awaited<ReturnType<typeof schoolMoaControllerGetOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetOne<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
          TError,
          Awaited<ReturnType<typeof schoolMoaControllerGetOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetOne<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolMoaControllerGetOne<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolMoaControllerGetOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchoolMoaControllerGetOneSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolMoaControllerGetOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>> = ({
    signal,
  }) => schoolMoaControllerGetOne(id, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolMoaControllerGetOneSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolMoaControllerGetOne>>
>;
export type SchoolMoaControllerGetOneSuspenseQueryError = unknown;

export function useSchoolMoaControllerGetOneSuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetOneSuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolMoaControllerGetOneSuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolMoaControllerGetOneSuspense<
  TData = Awaited<ReturnType<typeof schoolMoaControllerGetOne>>,
  TError = unknown,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schoolMoaControllerGetOne>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolMoaControllerGetOneSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const schoolMoaControllerApprove = (id: string | undefined | null, signal?: AbortSignal) => {
  return preconfiguredAxios<null>({ url: `/api/school/moa/${id}/approve`, method: "POST", signal });
};

export const getSchoolMoaControllerApproveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolMoaControllerApprove>>,
    TError,
    { id: string | undefined | null },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof schoolMoaControllerApprove>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ["schoolMoaControllerApprove"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolMoaControllerApprove>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {};

    return schoolMoaControllerApprove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SchoolMoaControllerApproveMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolMoaControllerApprove>>
>;

export type SchoolMoaControllerApproveMutationError = unknown;

export const useSchoolMoaControllerApprove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof schoolMoaControllerApprove>>,
      TError,
      { id: string | undefined | null },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof schoolMoaControllerApprove>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getSchoolMoaControllerApproveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const schoolMoaControllerDeny = (id: string | undefined | null, signal?: AbortSignal) => {
  return preconfiguredAxios<null>({ url: `/api/school/moa/${id}/deny`, method: "POST", signal });
};

export const getSchoolMoaControllerDenyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolMoaControllerDeny>>,
    TError,
    { id: string | undefined | null },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof schoolMoaControllerDeny>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ["schoolMoaControllerDeny"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolMoaControllerDeny>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {};

    return schoolMoaControllerDeny(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SchoolMoaControllerDenyMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolMoaControllerDeny>>
>;

export type SchoolMoaControllerDenyMutationError = unknown;

export const useSchoolMoaControllerDeny = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof schoolMoaControllerDeny>>,
      TError,
      { id: string | undefined | null },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof schoolMoaControllerDeny>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getSchoolMoaControllerDenyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
