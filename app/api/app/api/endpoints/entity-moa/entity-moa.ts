/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type { RequestNewMoaDto } from "../../models";

import { preconfiguredAxios } from "../../../../preconfig.axios";

export const entityMoaControllerGetMine = (signal?: AbortSignal) => {
  return preconfiguredAxios<null>({ url: `/api/entity/moa/me`, method: "GET", signal });
};

export const getEntityMoaControllerGetMineQueryKey = () => {
  return [`/api/entity/moa/me`] as const;
};

export const getEntityMoaControllerGetMineQueryOptions = <
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntityMoaControllerGetMineQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof entityMoaControllerGetMine>>> = ({
    signal,
  }) => entityMoaControllerGetMine(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntityMoaControllerGetMineQueryResult = NonNullable<
  Awaited<ReturnType<typeof entityMoaControllerGetMine>>
>;
export type EntityMoaControllerGetMineQueryError = unknown;

export function useEntityMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
          TError,
          Awaited<ReturnType<typeof entityMoaControllerGetMine>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
          TError,
          Awaited<ReturnType<typeof entityMoaControllerGetMine>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntityMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntityMoaControllerGetMineQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getEntityMoaControllerGetMineSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntityMoaControllerGetMineQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof entityMoaControllerGetMine>>> = ({
    signal,
  }) => entityMoaControllerGetMine(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntityMoaControllerGetMineSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof entityMoaControllerGetMine>>
>;
export type EntityMoaControllerGetMineSuspenseQueryError = unknown;

export function useEntityMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntityMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntityMoaControllerGetMineSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const entityMoaControllerRequestNew = (
  requestNewMoaDto: RequestNewMoaDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxios<null>({
    url: `/api/entity/moa/request`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: requestNewMoaDto,
    signal,
  });
};

export const getEntityMoaControllerRequestNewMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof entityMoaControllerRequestNew>>,
    TError,
    { data: RequestNewMoaDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof entityMoaControllerRequestNew>>,
  TError,
  { data: RequestNewMoaDto },
  TContext
> => {
  const mutationKey = ["entityMoaControllerRequestNew"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof entityMoaControllerRequestNew>>,
    { data: RequestNewMoaDto }
  > = (props) => {
    const { data } = props ?? {};

    return entityMoaControllerRequestNew(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type EntityMoaControllerRequestNewMutationResult = NonNullable<
  Awaited<ReturnType<typeof entityMoaControllerRequestNew>>
>;
export type EntityMoaControllerRequestNewMutationBody = RequestNewMoaDto;
export type EntityMoaControllerRequestNewMutationError = unknown;

export const useEntityMoaControllerRequestNew = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof entityMoaControllerRequestNew>>,
      TError,
      { data: RequestNewMoaDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof entityMoaControllerRequestNew>>,
  TError,
  { data: RequestNewMoaDto },
  TContext
> => {
  const mutationOptions = getEntityMoaControllerRequestNewMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
