/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  ErrorResponse,
  MoaRequestResponse,
  MoaRequestsResponse,
  NewCustomMoaRequestResponse,
  NewMoaRequestDto,
  NewStandardMoaRequestResponse,
} from "../../models";

import { preconfiguredAxios } from "../../../../preconfig.axios";

export const entityMoaControllerGetMine = (signal?: AbortSignal) => {
  return preconfiguredAxios<MoaRequestsResponse>({
    url: `/api/entity/moa/mine`,
    method: "GET",
    signal,
  });
};

export const getEntityMoaControllerGetMineQueryKey = () => {
  return [`/api/entity/moa/mine`] as const;
};

export const getEntityMoaControllerGetMineQueryOptions = <
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntityMoaControllerGetMineQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof entityMoaControllerGetMine>>> = ({
    signal,
  }) => entityMoaControllerGetMine(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntityMoaControllerGetMineQueryResult = NonNullable<
  Awaited<ReturnType<typeof entityMoaControllerGetMine>>
>;
export type EntityMoaControllerGetMineQueryError = ErrorResponse;

export function useEntityMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
          TError,
          Awaited<ReturnType<typeof entityMoaControllerGetMine>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
          TError,
          Awaited<ReturnType<typeof entityMoaControllerGetMine>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntityMoaControllerGetMine<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntityMoaControllerGetMineQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getEntityMoaControllerGetMineSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntityMoaControllerGetMineQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof entityMoaControllerGetMine>>> = ({
    signal,
  }) => entityMoaControllerGetMine(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntityMoaControllerGetMineSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof entityMoaControllerGetMine>>
>;
export type EntityMoaControllerGetMineSuspenseQueryError = ErrorResponse;

export function useEntityMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntityMoaControllerGetMineSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetMine>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entityMoaControllerGetMine>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntityMoaControllerGetMineSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const entityMoaControllerGetLatestMoaRequest = (signal?: AbortSignal) => {
  return preconfiguredAxios<MoaRequestResponse>({
    url: `/api/entity/moa/me/latest`,
    method: "GET",
    signal,
  });
};

export const getEntityMoaControllerGetLatestMoaRequestQueryKey = () => {
  return [`/api/entity/moa/me/latest`] as const;
};

export const getEntityMoaControllerGetLatestMoaRequestQueryOptions = <
  TData = Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntityMoaControllerGetLatestMoaRequestQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>
  > = ({ signal }) => entityMoaControllerGetLatestMoaRequest(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntityMoaControllerGetLatestMoaRequestQueryResult = NonNullable<
  Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>
>;
export type EntityMoaControllerGetLatestMoaRequestQueryError = ErrorResponse;

export function useEntityMoaControllerGetLatestMoaRequest<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
          TError,
          Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetLatestMoaRequest<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
          TError,
          Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetLatestMoaRequest<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntityMoaControllerGetLatestMoaRequest<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntityMoaControllerGetLatestMoaRequestQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getEntityMoaControllerGetLatestMoaRequestSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntityMoaControllerGetLatestMoaRequestQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>
  > = ({ signal }) => entityMoaControllerGetLatestMoaRequest(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntityMoaControllerGetLatestMoaRequestSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>
>;
export type EntityMoaControllerGetLatestMoaRequestSuspenseQueryError = ErrorResponse;

export function useEntityMoaControllerGetLatestMoaRequestSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetLatestMoaRequestSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntityMoaControllerGetLatestMoaRequestSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntityMoaControllerGetLatestMoaRequestSuspense<
  TData = Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof entityMoaControllerGetLatestMoaRequest>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntityMoaControllerGetLatestMoaRequestSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const entityMoaControllerRequestNewStandard = (
  newMoaRequestDto: NewMoaRequestDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxios<NewStandardMoaRequestResponse>({
    url: `/api/entity/moa/request`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: newMoaRequestDto,
    signal,
  });
};

export const getEntityMoaControllerRequestNewStandardMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof entityMoaControllerRequestNewStandard>>,
    TError,
    { data: NewMoaRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof entityMoaControllerRequestNewStandard>>,
  TError,
  { data: NewMoaRequestDto },
  TContext
> => {
  const mutationKey = ["entityMoaControllerRequestNewStandard"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof entityMoaControllerRequestNewStandard>>,
    { data: NewMoaRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return entityMoaControllerRequestNewStandard(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type EntityMoaControllerRequestNewStandardMutationResult = NonNullable<
  Awaited<ReturnType<typeof entityMoaControllerRequestNewStandard>>
>;
export type EntityMoaControllerRequestNewStandardMutationBody = NewMoaRequestDto;
export type EntityMoaControllerRequestNewStandardMutationError = ErrorResponse;

export const useEntityMoaControllerRequestNewStandard = <
  TError = ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof entityMoaControllerRequestNewStandard>>,
      TError,
      { data: NewMoaRequestDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof entityMoaControllerRequestNewStandard>>,
  TError,
  { data: NewMoaRequestDto },
  TContext
> => {
  const mutationOptions = getEntityMoaControllerRequestNewStandardMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const entityMoaControllerRequestNewCustom = (
  newMoaRequestDto: NewMoaRequestDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxios<NewCustomMoaRequestResponse>({
    url: `/api/entity/moa/request-custom`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: newMoaRequestDto,
    signal,
  });
};

export const getEntityMoaControllerRequestNewCustomMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof entityMoaControllerRequestNewCustom>>,
    TError,
    { data: NewMoaRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof entityMoaControllerRequestNewCustom>>,
  TError,
  { data: NewMoaRequestDto },
  TContext
> => {
  const mutationKey = ["entityMoaControllerRequestNewCustom"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof entityMoaControllerRequestNewCustom>>,
    { data: NewMoaRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return entityMoaControllerRequestNewCustom(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type EntityMoaControllerRequestNewCustomMutationResult = NonNullable<
  Awaited<ReturnType<typeof entityMoaControllerRequestNewCustom>>
>;
export type EntityMoaControllerRequestNewCustomMutationBody = NewMoaRequestDto;
export type EntityMoaControllerRequestNewCustomMutationError = ErrorResponse;

export const useEntityMoaControllerRequestNewCustom = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof entityMoaControllerRequestNewCustom>>,
      TError,
      { data: NewMoaRequestDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof entityMoaControllerRequestNewCustom>>,
  TError,
  { data: NewMoaRequestDto },
  TContext
> => {
  const mutationOptions = getEntityMoaControllerRequestNewCustomMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
