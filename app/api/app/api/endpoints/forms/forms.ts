/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  BaseResponse,
  CreatePendingFormDto,
  CreatePrefilledFormDto,
  CreateSignedFormDto,
  ErrorResponse,
  FormPendingResponse,
  FormRegistryResponse,
  FormsControllerGetPendingParams,
  RegisterFormSchemaDto,
} from "../../models";

import { preconfiguredAxiosFunction } from "../../../../preconfig.axios";

export const formsControllerGetRegistry = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<FormRegistryResponse>({
    url: `/api/forms/registry`,
    method: "GET",
    signal,
  });
};

export const getFormsControllerGetRegistryQueryKey = () => {
  return [`/api/forms/registry`] as const;
};

export const getFormsControllerGetRegistryQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetRegistryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetRegistry>>> = ({
    signal,
  }) => formsControllerGetRegistry(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetRegistry>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetRegistryQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetRegistry>>
>;
export type FormsControllerGetRegistryQueryError = ErrorResponse;

export function useFormsControllerGetRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetRegistry>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetRegistry>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetRegistry>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetRegistry>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetRegistryQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsControllerGetRegistrySuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetRegistryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetRegistry>>> = ({
    signal,
  }) => formsControllerGetRegistry(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetRegistry>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetRegistrySuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetRegistry>>
>;
export type FormsControllerGetRegistrySuspenseQueryError = ErrorResponse;

export function useFormsControllerGetRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetRegistrySuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsControllerGetPending = (
  params?: FormsControllerGetPendingParams,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<FormPendingResponse>({
    url: `/api/forms/pending`,
    method: "GET",
    params,
    signal,
  });
};

export const getFormsControllerGetPendingQueryKey = (params?: FormsControllerGetPendingParams) => {
  return [`/api/forms/pending`, ...(params ? [params] : [])] as const;
};

export const getFormsControllerGetPendingQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetPendingQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetPending>>> = ({
    signal,
  }) => formsControllerGetPending(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetPending>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetPendingQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetPending>>
>;
export type FormsControllerGetPendingQueryError = ErrorResponse;

export function useFormsControllerGetPending<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetPendingParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetPending>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetPending>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetPending<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetPending>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetPending>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetPending<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetPending<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetPendingQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsControllerGetPendingSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetPendingQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetPending>>> = ({
    signal,
  }) => formsControllerGetPending(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetPending>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetPendingSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetPending>>
>;
export type FormsControllerGetPendingSuspenseQueryError = ErrorResponse;

export function useFormsControllerGetPendingSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetPendingParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetPendingSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetPendingSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetPendingSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetPendingSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsControllerCreatePending = (
  createPendingFormDto: CreatePendingFormDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/pending`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createPendingFormDto,
    signal,
  });
};

export const getFormsControllerCreatePendingMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerCreatePending>>,
    TError,
    { data: CreatePendingFormDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerCreatePending>>,
  TError,
  { data: CreatePendingFormDto },
  TContext
> => {
  const mutationKey = ["formsControllerCreatePending"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerCreatePending>>,
    { data: CreatePendingFormDto }
  > = (props) => {
    const { data } = props ?? {};

    return formsControllerCreatePending(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerCreatePendingMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerCreatePending>>
>;
export type FormsControllerCreatePendingMutationBody = CreatePendingFormDto;
export type FormsControllerCreatePendingMutationError = ErrorResponse;

export const useFormsControllerCreatePending = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerCreatePending>>,
      TError,
      { data: CreatePendingFormDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerCreatePending>>,
  TError,
  { data: CreatePendingFormDto },
  TContext
> => {
  const mutationOptions = getFormsControllerCreatePendingMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const formsControllerGetFields = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/fields`,
    method: "GET",
    signal,
  });
};

export const getFormsControllerGetFieldsQueryKey = () => {
  return [`/api/forms/fields`] as const;
};

export const getFormsControllerGetFieldsQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetFields>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFields>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetFieldsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetFields>>> = ({
    signal,
  }) => formsControllerGetFields(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetFields>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetFieldsQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetFields>>
>;
export type FormsControllerGetFieldsQueryError = ErrorResponse;

export function useFormsControllerGetFields<
  TData = Awaited<ReturnType<typeof formsControllerGetFields>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFields>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetFields>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetFields>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFields<
  TData = Awaited<ReturnType<typeof formsControllerGetFields>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFields>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetFields>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetFields>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFields<
  TData = Awaited<ReturnType<typeof formsControllerGetFields>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFields>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetFields<
  TData = Awaited<ReturnType<typeof formsControllerGetFields>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFields>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetFieldsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsControllerGetFieldsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetFields>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFields>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetFieldsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetFields>>> = ({
    signal,
  }) => formsControllerGetFields(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetFields>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetFieldsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetFields>>
>;
export type FormsControllerGetFieldsSuspenseQueryError = ErrorResponse;

export function useFormsControllerGetFieldsSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFields>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFields>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFieldsSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFields>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFields>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFieldsSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFields>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFields>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetFieldsSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFields>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFields>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetFieldsSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsControllerApproveSignatory = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/approve`,
    method: "POST",
    signal,
  });
};

export const getFormsControllerApproveSignatoryMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerApproveSignatory>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerApproveSignatory>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["formsControllerApproveSignatory"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerApproveSignatory>>,
    void
  > = () => {
    return formsControllerApproveSignatory();
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerApproveSignatoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerApproveSignatory>>
>;

export type FormsControllerApproveSignatoryMutationError = ErrorResponse;

export const useFormsControllerApproveSignatory = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerApproveSignatory>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerApproveSignatory>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getFormsControllerApproveSignatoryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const formsControllerCreateSigned = (
  createSignedFormDto: CreateSignedFormDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/signed`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createSignedFormDto,
    signal,
  });
};

export const getFormsControllerCreateSignedMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerCreateSigned>>,
    TError,
    { data: CreateSignedFormDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerCreateSigned>>,
  TError,
  { data: CreateSignedFormDto },
  TContext
> => {
  const mutationKey = ["formsControllerCreateSigned"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerCreateSigned>>,
    { data: CreateSignedFormDto }
  > = (props) => {
    const { data } = props ?? {};

    return formsControllerCreateSigned(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerCreateSignedMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerCreateSigned>>
>;
export type FormsControllerCreateSignedMutationBody = CreateSignedFormDto;
export type FormsControllerCreateSignedMutationError = ErrorResponse;

export const useFormsControllerCreateSigned = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerCreateSigned>>,
      TError,
      { data: CreateSignedFormDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerCreateSigned>>,
  TError,
  { data: CreateSignedFormDto },
  TContext
> => {
  const mutationOptions = getFormsControllerCreateSignedMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const formsControllerCreatePrefilled = (
  createPrefilledFormDto: CreatePrefilledFormDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/prefill`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createPrefilledFormDto,
    signal,
  });
};

export const getFormsControllerCreatePrefilledMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerCreatePrefilled>>,
    TError,
    { data: CreatePrefilledFormDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerCreatePrefilled>>,
  TError,
  { data: CreatePrefilledFormDto },
  TContext
> => {
  const mutationKey = ["formsControllerCreatePrefilled"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerCreatePrefilled>>,
    { data: CreatePrefilledFormDto }
  > = (props) => {
    const { data } = props ?? {};

    return formsControllerCreatePrefilled(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerCreatePrefilledMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerCreatePrefilled>>
>;
export type FormsControllerCreatePrefilledMutationBody = CreatePrefilledFormDto;
export type FormsControllerCreatePrefilledMutationError = ErrorResponse;

export const useFormsControllerCreatePrefilled = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerCreatePrefilled>>,
      TError,
      { data: CreatePrefilledFormDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerCreatePrefilled>>,
  TError,
  { data: CreatePrefilledFormDto },
  TContext
> => {
  const mutationOptions = getFormsControllerCreatePrefilledMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const formsControllerUploadSchema = (
  registerFormSchemaDto: RegisterFormSchemaDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/upload-form-version`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerFormSchemaDto,
    signal,
  });
};

export const getFormsControllerUploadSchemaMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerUploadSchema>>,
    TError,
    { data: RegisterFormSchemaDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerUploadSchema>>,
  TError,
  { data: RegisterFormSchemaDto },
  TContext
> => {
  const mutationKey = ["formsControllerUploadSchema"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerUploadSchema>>,
    { data: RegisterFormSchemaDto }
  > = (props) => {
    const { data } = props ?? {};

    return formsControllerUploadSchema(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerUploadSchemaMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerUploadSchema>>
>;
export type FormsControllerUploadSchemaMutationBody = RegisterFormSchemaDto;
export type FormsControllerUploadSchemaMutationError = ErrorResponse;

export const useFormsControllerUploadSchema = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerUploadSchema>>,
      TError,
      { data: RegisterFormSchemaDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerUploadSchema>>,
  TError,
  { data: RegisterFormSchemaDto },
  TContext
> => {
  const mutationOptions = getFormsControllerUploadSchemaMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
