/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  BaseResponse,
  CreatePendingFormDto,
  CreatePrefilledFormDto,
  CreateSignedFormDto,
  ErrorResponse,
  FieldRegistryResponse,
  FieldRequestResponse,
  FormDocumentResponse,
  FormLatestResponse,
  FormMetadataResponse,
  FormPendingResponse,
  FormRegistryResponse,
  FormsControllerGetFieldFromRegistryParams,
  FormsControllerGetLatestFormDocumentAndMetadataParams,
  FormsControllerGetPendingParams,
  FormsControllerGetRegistryFormDocumentParams,
  FormsControllerGetRegistryFormMetadataParams,
  RegisterFieldDto,
  RegisterFormSchemaDto,
  UpdateFieldDto,
} from "../../models";

import { preconfiguredAxiosFunction } from "../../../../preconfig.axios";

export const formsControllerGetRegistry = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<FormRegistryResponse>({
    url: `/api/forms/registry`,
    method: "GET",
    signal,
  });
};

export const getFormsControllerGetRegistryQueryKey = () => {
  return [`/api/forms/registry`] as const;
};

export const getFormsControllerGetRegistryQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetRegistryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetRegistry>>> = ({
    signal,
  }) => formsControllerGetRegistry(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetRegistry>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetRegistryQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetRegistry>>
>;
export type FormsControllerGetRegistryQueryError = ErrorResponse;

export function useFormsControllerGetRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetRegistry>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetRegistry>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetRegistry>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetRegistry>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetRegistryQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsControllerGetRegistrySuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetRegistryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetRegistry>>> = ({
    signal,
  }) => formsControllerGetRegistry(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetRegistry>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetRegistrySuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetRegistry>>
>;
export type FormsControllerGetRegistrySuspenseQueryError = ErrorResponse;

export function useFormsControllerGetRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetRegistrySuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsControllerGetRegistryFormMetadata = (
  params?: FormsControllerGetRegistryFormMetadataParams,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<FormMetadataResponse>({
    url: `/api/forms/form-metadata`,
    method: "GET",
    params,
    signal,
  });
};

export const getFormsControllerGetRegistryFormMetadataQueryKey = (
  params?: FormsControllerGetRegistryFormMetadataParams
) => {
  return [`/api/forms/form-metadata`, ...(params ? [params] : [])] as const;
};

export const getFormsControllerGetRegistryFormMetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormMetadataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFormsControllerGetRegistryFormMetadataQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>
  > = ({ signal }) => formsControllerGetRegistryFormMetadata(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetRegistryFormMetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>
>;
export type FormsControllerGetRegistryFormMetadataQueryError = ErrorResponse;

export function useFormsControllerGetRegistryFormMetadata<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetRegistryFormMetadataParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistryFormMetadata<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormMetadataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistryFormMetadata<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormMetadataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetRegistryFormMetadata<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormMetadataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetRegistryFormMetadataQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsControllerGetRegistryFormMetadataSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormMetadataParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFormsControllerGetRegistryFormMetadataQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>
  > = ({ signal }) => formsControllerGetRegistryFormMetadata(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetRegistryFormMetadataSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>
>;
export type FormsControllerGetRegistryFormMetadataSuspenseQueryError = ErrorResponse;

export function useFormsControllerGetRegistryFormMetadataSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetRegistryFormMetadataParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistryFormMetadataSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormMetadataParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistryFormMetadataSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormMetadataParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetRegistryFormMetadataSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormMetadataParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetRegistryFormMetadataSuspenseQueryOptions(
    params,
    options
  );

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsControllerGetRegistryFormDocument = (
  params?: FormsControllerGetRegistryFormDocumentParams,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<FormDocumentResponse>({
    url: `/api/forms/form-document`,
    method: "GET",
    params,
    signal,
  });
};

export const getFormsControllerGetRegistryFormDocumentQueryKey = (
  params?: FormsControllerGetRegistryFormDocumentParams
) => {
  return [`/api/forms/form-document`, ...(params ? [params] : [])] as const;
};

export const getFormsControllerGetRegistryFormDocumentQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormDocumentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFormsControllerGetRegistryFormDocumentQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>
  > = ({ signal }) => formsControllerGetRegistryFormDocument(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetRegistryFormDocumentQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>
>;
export type FormsControllerGetRegistryFormDocumentQueryError = ErrorResponse;

export function useFormsControllerGetRegistryFormDocument<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetRegistryFormDocumentParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistryFormDocument<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormDocumentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistryFormDocument<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormDocumentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetRegistryFormDocument<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormDocumentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetRegistryFormDocumentQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsControllerGetRegistryFormDocumentSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormDocumentParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFormsControllerGetRegistryFormDocumentQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>
  > = ({ signal }) => formsControllerGetRegistryFormDocument(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetRegistryFormDocumentSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>
>;
export type FormsControllerGetRegistryFormDocumentSuspenseQueryError = ErrorResponse;

export function useFormsControllerGetRegistryFormDocumentSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetRegistryFormDocumentParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistryFormDocumentSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormDocumentParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetRegistryFormDocumentSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormDocumentParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetRegistryFormDocumentSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetRegistryFormDocumentParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetRegistryFormDocument>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetRegistryFormDocumentSuspenseQueryOptions(
    params,
    options
  );

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsControllerGetLatestFormDocumentAndMetadata = (
  params?: FormsControllerGetLatestFormDocumentAndMetadataParams,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<FormLatestResponse>({
    url: `/api/forms/form-latest`,
    method: "GET",
    params,
    signal,
  });
};

export const getFormsControllerGetLatestFormDocumentAndMetadataQueryKey = (
  params?: FormsControllerGetLatestFormDocumentAndMetadataParams
) => {
  return [`/api/forms/form-latest`, ...(params ? [params] : [])] as const;
};

export const getFormsControllerGetLatestFormDocumentAndMetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetLatestFormDocumentAndMetadataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFormsControllerGetLatestFormDocumentAndMetadataQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>
  > = ({ signal }) => formsControllerGetLatestFormDocumentAndMetadata(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetLatestFormDocumentAndMetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>
>;
export type FormsControllerGetLatestFormDocumentAndMetadataQueryError = ErrorResponse;

export function useFormsControllerGetLatestFormDocumentAndMetadata<
  TData = Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetLatestFormDocumentAndMetadataParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetLatestFormDocumentAndMetadata<
  TData = Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetLatestFormDocumentAndMetadataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetLatestFormDocumentAndMetadata<
  TData = Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetLatestFormDocumentAndMetadataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetLatestFormDocumentAndMetadata<
  TData = Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetLatestFormDocumentAndMetadataParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetLatestFormDocumentAndMetadataQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsControllerGetLatestFormDocumentAndMetadataSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetLatestFormDocumentAndMetadataParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFormsControllerGetLatestFormDocumentAndMetadataQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>
  > = ({ signal }) => formsControllerGetLatestFormDocumentAndMetadata(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetLatestFormDocumentAndMetadataSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>
>;
export type FormsControllerGetLatestFormDocumentAndMetadataSuspenseQueryError = ErrorResponse;

export function useFormsControllerGetLatestFormDocumentAndMetadataSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetLatestFormDocumentAndMetadataParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetLatestFormDocumentAndMetadataSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetLatestFormDocumentAndMetadataParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetLatestFormDocumentAndMetadataSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetLatestFormDocumentAndMetadataParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetLatestFormDocumentAndMetadataSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetLatestFormDocumentAndMetadataParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetLatestFormDocumentAndMetadata>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetLatestFormDocumentAndMetadataSuspenseQueryOptions(
    params,
    options
  );

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsControllerRegisterForm = (
  registerFormSchemaDto: RegisterFormSchemaDto,
  signal?: AbortSignal
) => {
  const formData = new FormData();
  formData.append(`name`, registerFormSchemaDto.name);
  formData.append(`label`, registerFormSchemaDto.label);
  formData.append(`schema_version`, registerFormSchemaDto.schema_version.toString());
  registerFormSchemaDto.schema.forEach((value) => formData.append(`schema`, JSON.stringify(value)));
  registerFormSchemaDto.subscribers.forEach((value) =>
    formData.append(`subscribers`, JSON.stringify(value))
  );
  registerFormSchemaDto.signatories.forEach((value) =>
    formData.append(`signatories`, JSON.stringify(value))
  );
  formData.append(`base_document`, registerFormSchemaDto.base_document);
  registerFormSchemaDto.required_parties.forEach((value) =>
    formData.append(`required_parties`, value)
  );

  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/register-form`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getFormsControllerRegisterFormMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerRegisterForm>>,
    TError,
    { data: RegisterFormSchemaDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerRegisterForm>>,
  TError,
  { data: RegisterFormSchemaDto },
  TContext
> => {
  const mutationKey = ["formsControllerRegisterForm"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerRegisterForm>>,
    { data: RegisterFormSchemaDto }
  > = (props) => {
    const { data } = props ?? {};

    return formsControllerRegisterForm(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerRegisterFormMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerRegisterForm>>
>;
export type FormsControllerRegisterFormMutationBody = RegisterFormSchemaDto;
export type FormsControllerRegisterFormMutationError = ErrorResponse;

export const useFormsControllerRegisterForm = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerRegisterForm>>,
      TError,
      { data: RegisterFormSchemaDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerRegisterForm>>,
  TError,
  { data: RegisterFormSchemaDto },
  TContext
> => {
  const mutationOptions = getFormsControllerRegisterFormMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const formsControllerGetFieldRegistry = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<FieldRegistryResponse>({
    url: `/api/forms/fields`,
    method: "GET",
    signal,
  });
};

export const getFormsControllerGetFieldRegistryQueryKey = () => {
  return [`/api/forms/fields`] as const;
};

export const getFormsControllerGetFieldRegistryQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetFieldRegistryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>> = ({
    signal,
  }) => formsControllerGetFieldRegistry(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetFieldRegistryQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>
>;
export type FormsControllerGetFieldRegistryQueryError = ErrorResponse;

export function useFormsControllerGetFieldRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFieldRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFieldRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetFieldRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetFieldRegistryQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsControllerGetFieldRegistrySuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetFieldRegistryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>> = ({
    signal,
  }) => formsControllerGetFieldRegistry(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetFieldRegistrySuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>
>;
export type FormsControllerGetFieldRegistrySuspenseQueryError = ErrorResponse;

export function useFormsControllerGetFieldRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFieldRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFieldRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetFieldRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldRegistry>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetFieldRegistrySuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsControllerRegisterField = (
  registerFieldDto: RegisterFieldDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/add-field`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerFieldDto,
    signal,
  });
};

export const getFormsControllerRegisterFieldMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerRegisterField>>,
    TError,
    { data: RegisterFieldDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerRegisterField>>,
  TError,
  { data: RegisterFieldDto },
  TContext
> => {
  const mutationKey = ["formsControllerRegisterField"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerRegisterField>>,
    { data: RegisterFieldDto }
  > = (props) => {
    const { data } = props ?? {};

    return formsControllerRegisterField(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerRegisterFieldMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerRegisterField>>
>;
export type FormsControllerRegisterFieldMutationBody = RegisterFieldDto;
export type FormsControllerRegisterFieldMutationError = ErrorResponse;

export const useFormsControllerRegisterField = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerRegisterField>>,
      TError,
      { data: RegisterFieldDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerRegisterField>>,
  TError,
  { data: RegisterFieldDto },
  TContext
> => {
  const mutationOptions = getFormsControllerRegisterFieldMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const formsControllerUpdateField = (
  updateFieldDto: UpdateFieldDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/edit-field`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: updateFieldDto,
    signal,
  });
};

export const getFormsControllerUpdateFieldMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerUpdateField>>,
    TError,
    { data: UpdateFieldDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerUpdateField>>,
  TError,
  { data: UpdateFieldDto },
  TContext
> => {
  const mutationKey = ["formsControllerUpdateField"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerUpdateField>>,
    { data: UpdateFieldDto }
  > = (props) => {
    const { data } = props ?? {};

    return formsControllerUpdateField(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerUpdateFieldMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerUpdateField>>
>;
export type FormsControllerUpdateFieldMutationBody = UpdateFieldDto;
export type FormsControllerUpdateFieldMutationError = ErrorResponse;

export const useFormsControllerUpdateField = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerUpdateField>>,
      TError,
      { data: UpdateFieldDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerUpdateField>>,
  TError,
  { data: UpdateFieldDto },
  TContext
> => {
  const mutationOptions = getFormsControllerUpdateFieldMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const formsControllerGetFieldFromRegistry = (
  params?: FormsControllerGetFieldFromRegistryParams,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<FieldRequestResponse>({
    url: `/api/forms/field`,
    method: "GET",
    params,
    signal,
  });
};

export const getFormsControllerGetFieldFromRegistryQueryKey = (
  params?: FormsControllerGetFieldFromRegistryParams
) => {
  return [`/api/forms/field`, ...(params ? [params] : [])] as const;
};

export const getFormsControllerGetFieldFromRegistryQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetFieldFromRegistryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetFieldFromRegistryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>> = ({
    signal,
  }) => formsControllerGetFieldFromRegistry(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetFieldFromRegistryQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>
>;
export type FormsControllerGetFieldFromRegistryQueryError = ErrorResponse;

export function useFormsControllerGetFieldFromRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetFieldFromRegistryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFieldFromRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetFieldFromRegistryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFieldFromRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetFieldFromRegistryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetFieldFromRegistry<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetFieldFromRegistryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetFieldFromRegistryQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsControllerGetFieldFromRegistrySuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetFieldFromRegistryParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetFieldFromRegistryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>> = ({
    signal,
  }) => formsControllerGetFieldFromRegistry(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetFieldFromRegistrySuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>
>;
export type FormsControllerGetFieldFromRegistrySuspenseQueryError = ErrorResponse;

export function useFormsControllerGetFieldFromRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetFieldFromRegistryParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFieldFromRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetFieldFromRegistryParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetFieldFromRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetFieldFromRegistryParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetFieldFromRegistrySuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetFieldFromRegistryParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof formsControllerGetFieldFromRegistry>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetFieldFromRegistrySuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsControllerGetPending = (
  params?: FormsControllerGetPendingParams,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<FormPendingResponse>({
    url: `/api/forms/pending`,
    method: "GET",
    params,
    signal,
  });
};

export const getFormsControllerGetPendingQueryKey = (params?: FormsControllerGetPendingParams) => {
  return [`/api/forms/pending`, ...(params ? [params] : [])] as const;
};

export const getFormsControllerGetPendingQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetPendingQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetPending>>> = ({
    signal,
  }) => formsControllerGetPending(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetPending>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetPendingQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetPending>>
>;
export type FormsControllerGetPendingQueryError = ErrorResponse;

export function useFormsControllerGetPending<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetPendingParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetPending>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetPending>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetPending<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof formsControllerGetPending>>,
          TError,
          Awaited<ReturnType<typeof formsControllerGetPending>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetPending<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetPending<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetPendingQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFormsControllerGetPendingSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFormsControllerGetPendingQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof formsControllerGetPending>>> = ({
    signal,
  }) => formsControllerGetPending(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof formsControllerGetPending>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FormsControllerGetPendingSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerGetPending>>
>;
export type FormsControllerGetPendingSuspenseQueryError = ErrorResponse;

export function useFormsControllerGetPendingSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params: undefined | FormsControllerGetPendingParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetPendingSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useFormsControllerGetPendingSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useFormsControllerGetPendingSuspense<
  TData = Awaited<ReturnType<typeof formsControllerGetPending>>,
  TError = ErrorResponse,
>(
  params?: FormsControllerGetPendingParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof formsControllerGetPending>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFormsControllerGetPendingSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const formsControllerCreatePending = (
  createPendingFormDto: CreatePendingFormDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/pending`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createPendingFormDto,
    signal,
  });
};

export const getFormsControllerCreatePendingMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerCreatePending>>,
    TError,
    { data: CreatePendingFormDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerCreatePending>>,
  TError,
  { data: CreatePendingFormDto },
  TContext
> => {
  const mutationKey = ["formsControllerCreatePending"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerCreatePending>>,
    { data: CreatePendingFormDto }
  > = (props) => {
    const { data } = props ?? {};

    return formsControllerCreatePending(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerCreatePendingMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerCreatePending>>
>;
export type FormsControllerCreatePendingMutationBody = CreatePendingFormDto;
export type FormsControllerCreatePendingMutationError = ErrorResponse;

export const useFormsControllerCreatePending = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerCreatePending>>,
      TError,
      { data: CreatePendingFormDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerCreatePending>>,
  TError,
  { data: CreatePendingFormDto },
  TContext
> => {
  const mutationOptions = getFormsControllerCreatePendingMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const formsControllerApproveSignatory = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/approve`,
    method: "POST",
    signal,
  });
};

export const getFormsControllerApproveSignatoryMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerApproveSignatory>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerApproveSignatory>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["formsControllerApproveSignatory"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerApproveSignatory>>,
    void
  > = () => {
    return formsControllerApproveSignatory();
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerApproveSignatoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerApproveSignatory>>
>;

export type FormsControllerApproveSignatoryMutationError = ErrorResponse;

export const useFormsControllerApproveSignatory = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerApproveSignatory>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerApproveSignatory>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getFormsControllerApproveSignatoryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const formsControllerCreatePrefilled = (
  createPrefilledFormDto: CreatePrefilledFormDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/prefill`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createPrefilledFormDto,
    signal,
  });
};

export const getFormsControllerCreatePrefilledMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerCreatePrefilled>>,
    TError,
    { data: CreatePrefilledFormDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerCreatePrefilled>>,
  TError,
  { data: CreatePrefilledFormDto },
  TContext
> => {
  const mutationKey = ["formsControllerCreatePrefilled"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerCreatePrefilled>>,
    { data: CreatePrefilledFormDto }
  > = (props) => {
    const { data } = props ?? {};

    return formsControllerCreatePrefilled(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerCreatePrefilledMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerCreatePrefilled>>
>;
export type FormsControllerCreatePrefilledMutationBody = CreatePrefilledFormDto;
export type FormsControllerCreatePrefilledMutationError = ErrorResponse;

export const useFormsControllerCreatePrefilled = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerCreatePrefilled>>,
      TError,
      { data: CreatePrefilledFormDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerCreatePrefilled>>,
  TError,
  { data: CreatePrefilledFormDto },
  TContext
> => {
  const mutationOptions = getFormsControllerCreatePrefilledMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const formsControllerCreateSigned = (
  createSignedFormDto: CreateSignedFormDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/forms/signed`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createSignedFormDto,
    signal,
  });
};

export const getFormsControllerCreateSignedMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof formsControllerCreateSigned>>,
    TError,
    { data: CreateSignedFormDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof formsControllerCreateSigned>>,
  TError,
  { data: CreateSignedFormDto },
  TContext
> => {
  const mutationKey = ["formsControllerCreateSigned"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof formsControllerCreateSigned>>,
    { data: CreateSignedFormDto }
  > = (props) => {
    const { data } = props ?? {};

    return formsControllerCreateSigned(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FormsControllerCreateSignedMutationResult = NonNullable<
  Awaited<ReturnType<typeof formsControllerCreateSigned>>
>;
export type FormsControllerCreateSignedMutationBody = CreateSignedFormDto;
export type FormsControllerCreateSignedMutationError = ErrorResponse;

export const useFormsControllerCreateSigned = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof formsControllerCreateSigned>>,
      TError,
      { data: CreateSignedFormDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof formsControllerCreateSigned>>,
  TError,
  { data: CreateSignedFormDto },
  TContext
> => {
  const mutationOptions = getFormsControllerCreateSignedMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
