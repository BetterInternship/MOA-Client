/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  BaseResponse,
  EntitiesResponse,
  EntityResponse,
  ErrorResponse,
  ReconsiderEntityDto,
} from "../../models";

import { preconfiguredAxiosFunction } from "../../../../preconfig.axios";

export const entitiesControllerGetList = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<EntitiesResponse>({
    url: `/api/entities/list`,
    method: "GET",
    signal,
  });
};

export const getEntitiesControllerGetListQueryKey = () => {
  return [`/api/entities/list`] as const;
};

export const getEntitiesControllerGetListQueryOptions = <
  TData = Awaited<ReturnType<typeof entitiesControllerGetList>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetList>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntitiesControllerGetListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof entitiesControllerGetList>>> = ({
    signal,
  }) => entitiesControllerGetList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof entitiesControllerGetList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntitiesControllerGetListQueryResult = NonNullable<
  Awaited<ReturnType<typeof entitiesControllerGetList>>
>;
export type EntitiesControllerGetListQueryError = ErrorResponse;

export function useEntitiesControllerGetList<
  TData = Awaited<ReturnType<typeof entitiesControllerGetList>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof entitiesControllerGetList>>,
          TError,
          Awaited<ReturnType<typeof entitiesControllerGetList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitiesControllerGetList<
  TData = Awaited<ReturnType<typeof entitiesControllerGetList>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof entitiesControllerGetList>>,
          TError,
          Awaited<ReturnType<typeof entitiesControllerGetList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitiesControllerGetList<
  TData = Awaited<ReturnType<typeof entitiesControllerGetList>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetList>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntitiesControllerGetList<
  TData = Awaited<ReturnType<typeof entitiesControllerGetList>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetList>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntitiesControllerGetListQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getEntitiesControllerGetListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof entitiesControllerGetList>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetList>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntitiesControllerGetListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof entitiesControllerGetList>>> = ({
    signal,
  }) => entitiesControllerGetList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof entitiesControllerGetList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntitiesControllerGetListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof entitiesControllerGetList>>
>;
export type EntitiesControllerGetListSuspenseQueryError = ErrorResponse;

export function useEntitiesControllerGetListSuspense<
  TData = Awaited<ReturnType<typeof entitiesControllerGetList>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetList>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitiesControllerGetListSuspense<
  TData = Awaited<ReturnType<typeof entitiesControllerGetList>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetList>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitiesControllerGetListSuspense<
  TData = Awaited<ReturnType<typeof entitiesControllerGetList>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetList>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntitiesControllerGetListSuspense<
  TData = Awaited<ReturnType<typeof entitiesControllerGetList>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetList>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntitiesControllerGetListSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const entitiesControllerGetSelf = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<EntityResponse>({
    url: `/api/entities/me`,
    method: "GET",
    signal,
  });
};

export const getEntitiesControllerGetSelfQueryKey = () => {
  return [`/api/entities/me`] as const;
};

export const getEntitiesControllerGetSelfQueryOptions = <
  TData = Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetSelf>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntitiesControllerGetSelfQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof entitiesControllerGetSelf>>> = ({
    signal,
  }) => entitiesControllerGetSelf(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntitiesControllerGetSelfQueryResult = NonNullable<
  Awaited<ReturnType<typeof entitiesControllerGetSelf>>
>;
export type EntitiesControllerGetSelfQueryError = ErrorResponse;

export function useEntitiesControllerGetSelf<
  TData = Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetSelf>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
          TError,
          Awaited<ReturnType<typeof entitiesControllerGetSelf>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitiesControllerGetSelf<
  TData = Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetSelf>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
          TError,
          Awaited<ReturnType<typeof entitiesControllerGetSelf>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitiesControllerGetSelf<
  TData = Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetSelf>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntitiesControllerGetSelf<
  TData = Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetSelf>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntitiesControllerGetSelfQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getEntitiesControllerGetSelfSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetSelf>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntitiesControllerGetSelfQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof entitiesControllerGetSelf>>> = ({
    signal,
  }) => entitiesControllerGetSelf(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntitiesControllerGetSelfSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof entitiesControllerGetSelf>>
>;
export type EntitiesControllerGetSelfSuspenseQueryError = ErrorResponse;

export function useEntitiesControllerGetSelfSuspense<
  TData = Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetSelf>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitiesControllerGetSelfSuspense<
  TData = Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetSelf>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitiesControllerGetSelfSuspense<
  TData = Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetSelf>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntitiesControllerGetSelfSuspense<
  TData = Awaited<ReturnType<typeof entitiesControllerGetSelf>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof entitiesControllerGetSelf>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntitiesControllerGetSelfSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const entitiesControllerReconsider = (
  reconsiderEntityDto: ReconsiderEntityDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/entities/reconsider`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: reconsiderEntityDto,
    signal,
  });
};

export const getEntitiesControllerReconsiderMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof entitiesControllerReconsider>>,
    TError,
    { data: ReconsiderEntityDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof entitiesControllerReconsider>>,
  TError,
  { data: ReconsiderEntityDto },
  TContext
> => {
  const mutationKey = ["entitiesControllerReconsider"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof entitiesControllerReconsider>>,
    { data: ReconsiderEntityDto }
  > = (props) => {
    const { data } = props ?? {};

    return entitiesControllerReconsider(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type EntitiesControllerReconsiderMutationResult = NonNullable<
  Awaited<ReturnType<typeof entitiesControllerReconsider>>
>;
export type EntitiesControllerReconsiderMutationBody = ReconsiderEntityDto;
export type EntitiesControllerReconsiderMutationError = ErrorResponse;

export const useEntitiesControllerReconsider = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof entitiesControllerReconsider>>,
      TError,
      { data: ReconsiderEntityDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof entitiesControllerReconsider>>,
  TError,
  { data: ReconsiderEntityDto },
  TContext
> => {
  const mutationOptions = getEntitiesControllerReconsiderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
