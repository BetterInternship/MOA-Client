/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type { ErrorResponse, SchoolAccountResponse, SchoolResponse } from "../../models";

import { preconfiguredAxiosFunction } from "../../../../preconfig.axios";

export const schoolsControllerGetSelfAccount = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<SchoolAccountResponse>({
    url: `/api/schools/me`,
    method: "GET",
    signal,
  });
};

export const getSchoolsControllerGetSelfAccountQueryKey = () => {
  return [`/api/schools/me`] as const;
};

export const getSchoolsControllerGetSelfAccountQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolsControllerGetSelfAccountQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>> = ({
    signal,
  }) => schoolsControllerGetSelfAccount(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolsControllerGetSelfAccountQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>
>;
export type SchoolsControllerGetSelfAccountQueryError = ErrorResponse;

export function useSchoolsControllerGetSelfAccount<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
          TError,
          Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolsControllerGetSelfAccount<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
          TError,
          Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolsControllerGetSelfAccount<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolsControllerGetSelfAccount<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolsControllerGetSelfAccountQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchoolsControllerGetSelfAccountSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolsControllerGetSelfAccountQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>> = ({
    signal,
  }) => schoolsControllerGetSelfAccount(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolsControllerGetSelfAccountSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>
>;
export type SchoolsControllerGetSelfAccountSuspenseQueryError = ErrorResponse;

export function useSchoolsControllerGetSelfAccountSuspense<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolsControllerGetSelfAccountSuspense<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolsControllerGetSelfAccountSuspense<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolsControllerGetSelfAccountSuspense<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolsControllerGetSelfAccount>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolsControllerGetSelfAccountSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const schoolsControllerGetSelfSchool = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<SchoolResponse>({
    url: `/api/schools/own`,
    method: "GET",
    signal,
  });
};

export const getSchoolsControllerGetSelfSchoolQueryKey = () => {
  return [`/api/schools/own`] as const;
};

export const getSchoolsControllerGetSelfSchoolQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolsControllerGetSelfSchoolQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>> = ({
    signal,
  }) => schoolsControllerGetSelfSchool(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolsControllerGetSelfSchoolQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>
>;
export type SchoolsControllerGetSelfSchoolQueryError = ErrorResponse;

export function useSchoolsControllerGetSelfSchool<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
          TError,
          Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolsControllerGetSelfSchool<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
          TError,
          Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolsControllerGetSelfSchool<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolsControllerGetSelfSchool<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolsControllerGetSelfSchoolQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchoolsControllerGetSelfSchoolSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchoolsControllerGetSelfSchoolQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>> = ({
    signal,
  }) => schoolsControllerGetSelfSchool(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchoolsControllerGetSelfSchoolSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>
>;
export type SchoolsControllerGetSelfSchoolSuspenseQueryError = ErrorResponse;

export function useSchoolsControllerGetSelfSchoolSuspense<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolsControllerGetSelfSchoolSuspense<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchoolsControllerGetSelfSchoolSuspense<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchoolsControllerGetSelfSchoolSuspense<
  TData = Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof schoolsControllerGetSelfSchool>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchoolsControllerGetSelfSchoolSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
