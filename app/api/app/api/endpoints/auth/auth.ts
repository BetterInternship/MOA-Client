/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  BaseResponse,
  ErrorResponse,
  LoginEntityDto,
  LoginSchoolDto,
  RegisterEntityDto,
  RegisterEntityResponse,
} from "../../models";

import { preconfiguredAxiosFunction } from "../../../../preconfig.axios";

export const authControllerRegister = (
  registerEntityDto: RegisterEntityDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<RegisterEntityResponse>({
    url: `/api/auth/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerEntityDto,
    signal,
  });
};

export const getAuthControllerRegisterMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: RegisterEntityDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: RegisterEntityDto },
  TContext
> => {
  const mutationKey = ["authControllerRegister"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegister>>,
    { data: RegisterEntityDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegister>>
>;
export type AuthControllerRegisterMutationBody = RegisterEntityDto;
export type AuthControllerRegisterMutationError = ErrorResponse;

export const useAuthControllerRegister = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerRegister>>,
      TError,
      { data: RegisterEntityDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: RegisterEntityDto },
  TContext
> => {
  const mutationOptions = getAuthControllerRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerSignIn = (loginEntityDto: LoginEntityDto, signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginEntityDto,
    signal,
  });
};

export const getAuthControllerSignInMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignIn>>,
    TError,
    { data: LoginEntityDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSignIn>>,
  TError,
  { data: LoginEntityDto },
  TContext
> => {
  const mutationKey = ["authControllerSignIn"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignIn>>,
    { data: LoginEntityDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerSignIn(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignInMutationBody = LoginEntityDto;
export type AuthControllerSignInMutationError = ErrorResponse;

export const useAuthControllerSignIn = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSignIn>>,
      TError,
      { data: LoginEntityDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSignIn>>,
  TError,
  { data: LoginEntityDto },
  TContext
> => {
  const mutationOptions = getAuthControllerSignInMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerSignOut = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/logout`,
    method: "POST",
    signal,
  });
};

export const getAuthControllerSignOutMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignOut>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSignOut>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerSignOut"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignOut>>,
    void
  > = () => {
    return authControllerSignOut();
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSignOutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;

export type AuthControllerSignOutMutationError = ErrorResponse;

export const useAuthControllerSignOut = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSignOut>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof authControllerSignOut>>, TError, void, TContext> => {
  const mutationOptions = getAuthControllerSignOutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerSchoolSignIn = (
  loginSchoolDto: LoginSchoolDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/school/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginSchoolDto,
    signal,
  });
};

export const getAuthControllerSchoolSignInMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSchoolSignIn>>,
    TError,
    { data: LoginSchoolDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSchoolSignIn>>,
  TError,
  { data: LoginSchoolDto },
  TContext
> => {
  const mutationKey = ["authControllerSchoolSignIn"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSchoolSignIn>>,
    { data: LoginSchoolDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerSchoolSignIn(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSchoolSignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSchoolSignIn>>
>;
export type AuthControllerSchoolSignInMutationBody = LoginSchoolDto;
export type AuthControllerSchoolSignInMutationError = ErrorResponse;

export const useAuthControllerSchoolSignIn = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSchoolSignIn>>,
      TError,
      { data: LoginSchoolDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSchoolSignIn>>,
  TError,
  { data: LoginSchoolDto },
  TContext
> => {
  const mutationOptions = getAuthControllerSchoolSignInMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerSchoolSignOut = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/school/logout`,
    method: "POST",
    signal,
  });
};

export const getAuthControllerSchoolSignOutMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSchoolSignOut>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSchoolSignOut>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerSchoolSignOut"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSchoolSignOut>>,
    void
  > = () => {
    return authControllerSchoolSignOut();
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSchoolSignOutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSchoolSignOut>>
>;

export type AuthControllerSchoolSignOutMutationError = ErrorResponse;

export const useAuthControllerSchoolSignOut = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSchoolSignOut>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSchoolSignOut>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerSchoolSignOutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
