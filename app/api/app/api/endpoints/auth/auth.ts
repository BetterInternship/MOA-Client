/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  BaseResponse,
  CreateCompanyDto,
  DocsLoginRequestDto,
  DocsVerifyDto,
  ErrorResponse,
  LoginEntityDto,
  LoginSchoolDto,
  SelfEntityResponse,
  SelfSchoolResponse,
} from "../../models";

import { preconfiguredAxiosFunction } from "../../../../preconfig.axios";

export const authControllerEntitySelf = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<SelfEntityResponse>({
    url: `/api/auth/self`,
    method: "POST",
    signal,
  });
};

export const getAuthControllerEntitySelfMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerEntitySelf>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerEntitySelf>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerEntitySelf"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerEntitySelf>>,
    void
  > = () => {
    return authControllerEntitySelf();
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerEntitySelfMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerEntitySelf>>
>;

export type AuthControllerEntitySelfMutationError = ErrorResponse;

export const useAuthControllerEntitySelf = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerEntitySelf>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerEntitySelf>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerEntitySelfMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authPublicRegisterCompany = (
  createCompanyDto: CreateCompanyDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/public/register-company`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createCompanyDto,
    signal,
  });
};

export const getAuthPublicRegisterCompanyMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authPublicRegisterCompany>>,
    TError,
    { data: CreateCompanyDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authPublicRegisterCompany>>,
  TError,
  { data: CreateCompanyDto },
  TContext
> => {
  const mutationKey = ["authPublicRegisterCompany"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authPublicRegisterCompany>>,
    { data: CreateCompanyDto }
  > = (props) => {
    const { data } = props ?? {};

    return authPublicRegisterCompany(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthPublicRegisterCompanyMutationResult = NonNullable<
  Awaited<ReturnType<typeof authPublicRegisterCompany>>
>;
export type AuthPublicRegisterCompanyMutationBody = CreateCompanyDto;
export type AuthPublicRegisterCompanyMutationError = ErrorResponse;

export const useAuthPublicRegisterCompany = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authPublicRegisterCompany>>,
      TError,
      { data: CreateCompanyDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authPublicRegisterCompany>>,
  TError,
  { data: CreateCompanyDto },
  TContext
> => {
  const mutationOptions = getAuthPublicRegisterCompanyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerSignIn = (loginEntityDto: LoginEntityDto, signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginEntityDto,
    signal,
  });
};

export const getAuthControllerSignInMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignIn>>,
    TError,
    { data: LoginEntityDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSignIn>>,
  TError,
  { data: LoginEntityDto },
  TContext
> => {
  const mutationKey = ["authControllerSignIn"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignIn>>,
    { data: LoginEntityDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerSignIn(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignInMutationBody = LoginEntityDto;
export type AuthControllerSignInMutationError = ErrorResponse;

export const useAuthControllerSignIn = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSignIn>>,
      TError,
      { data: LoginEntityDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSignIn>>,
  TError,
  { data: LoginEntityDto },
  TContext
> => {
  const mutationOptions = getAuthControllerSignInMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerSignOut = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/logout`,
    method: "POST",
    signal,
  });
};

export const getAuthControllerSignOutMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignOut>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSignOut>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerSignOut"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignOut>>,
    void
  > = () => {
    return authControllerSignOut();
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSignOutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;

export type AuthControllerSignOutMutationError = ErrorResponse;

export const useAuthControllerSignOut = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSignOut>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof authControllerSignOut>>, TError, void, TContext> => {
  const mutationOptions = getAuthControllerSignOutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerSchoolSignIn = (
  loginSchoolDto: LoginSchoolDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/school/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginSchoolDto,
    signal,
  });
};

export const getAuthControllerSchoolSignInMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSchoolSignIn>>,
    TError,
    { data: LoginSchoolDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSchoolSignIn>>,
  TError,
  { data: LoginSchoolDto },
  TContext
> => {
  const mutationKey = ["authControllerSchoolSignIn"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSchoolSignIn>>,
    { data: LoginSchoolDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerSchoolSignIn(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSchoolSignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSchoolSignIn>>
>;
export type AuthControllerSchoolSignInMutationBody = LoginSchoolDto;
export type AuthControllerSchoolSignInMutationError = ErrorResponse;

export const useAuthControllerSchoolSignIn = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSchoolSignIn>>,
      TError,
      { data: LoginSchoolDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSchoolSignIn>>,
  TError,
  { data: LoginSchoolDto },
  TContext
> => {
  const mutationOptions = getAuthControllerSchoolSignInMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerSchoolSelf = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<SelfSchoolResponse>({
    url: `/api/auth/school/self`,
    method: "POST",
    signal,
  });
};

export const getAuthControllerSchoolSelfMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSchoolSelf>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSchoolSelf>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerSchoolSelf"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSchoolSelf>>,
    void
  > = () => {
    return authControllerSchoolSelf();
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSchoolSelfMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSchoolSelf>>
>;

export type AuthControllerSchoolSelfMutationError = ErrorResponse;

export const useAuthControllerSchoolSelf = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSchoolSelf>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSchoolSelf>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerSchoolSelfMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerSchoolSignOut = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/school/logout`,
    method: "POST",
    signal,
  });
};

export const getAuthControllerSchoolSignOutMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSchoolSignOut>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSchoolSignOut>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerSchoolSignOut"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSchoolSignOut>>,
    void
  > = () => {
    return authControllerSchoolSignOut();
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSchoolSignOutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSchoolSignOut>>
>;

export type AuthControllerSchoolSignOutMutationError = ErrorResponse;

export const useAuthControllerSchoolSignOut = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSchoolSignOut>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSchoolSignOut>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerSchoolSignOutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerDocsLoginRequest = (
  docsLoginRequestDto: DocsLoginRequestDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/docs/login/request`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: docsLoginRequestDto,
    signal,
  });
};

export const getAuthControllerDocsLoginRequestMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerDocsLoginRequest>>,
    TError,
    { data: DocsLoginRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerDocsLoginRequest>>,
  TError,
  { data: DocsLoginRequestDto },
  TContext
> => {
  const mutationKey = ["authControllerDocsLoginRequest"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerDocsLoginRequest>>,
    { data: DocsLoginRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerDocsLoginRequest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerDocsLoginRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerDocsLoginRequest>>
>;
export type AuthControllerDocsLoginRequestMutationBody = DocsLoginRequestDto;
export type AuthControllerDocsLoginRequestMutationError = ErrorResponse;

export const useAuthControllerDocsLoginRequest = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerDocsLoginRequest>>,
      TError,
      { data: DocsLoginRequestDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerDocsLoginRequest>>,
  TError,
  { data: DocsLoginRequestDto },
  TContext
> => {
  const mutationOptions = getAuthControllerDocsLoginRequestMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerDocsLoginVerify = (
  docsVerifyDto: DocsVerifyDto,
  signal?: AbortSignal
) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/docs/login/verify`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: docsVerifyDto,
    signal,
  });
};

export const getAuthControllerDocsLoginVerifyMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerDocsLoginVerify>>,
    TError,
    { data: DocsVerifyDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerDocsLoginVerify>>,
  TError,
  { data: DocsVerifyDto },
  TContext
> => {
  const mutationKey = ["authControllerDocsLoginVerify"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerDocsLoginVerify>>,
    { data: DocsVerifyDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerDocsLoginVerify(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerDocsLoginVerifyMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerDocsLoginVerify>>
>;
export type AuthControllerDocsLoginVerifyMutationBody = DocsVerifyDto;
export type AuthControllerDocsLoginVerifyMutationError = ErrorResponse;

export const useAuthControllerDocsLoginVerify = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerDocsLoginVerify>>,
      TError,
      { data: DocsVerifyDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerDocsLoginVerify>>,
  TError,
  { data: DocsVerifyDto },
  TContext
> => {
  const mutationOptions = getAuthControllerDocsLoginVerifyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerDocsSelf = (signal?: AbortSignal) => {
  return preconfiguredAxiosFunction<BaseResponse>({
    url: `/api/auth/docs/self`,
    method: "POST",
    signal,
  });
};

export const getAuthControllerDocsSelfMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerDocsSelf>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerDocsSelf>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["authControllerDocsSelf"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerDocsSelf>>,
    void
  > = () => {
    return authControllerDocsSelf();
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerDocsSelfMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerDocsSelf>>
>;

export type AuthControllerDocsSelfMutationError = ErrorResponse;

export const useAuthControllerDocsSelf = <TError = ErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerDocsSelf>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerDocsSelf>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerDocsSelfMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
