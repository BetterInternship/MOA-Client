/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * BetterInternship MOA API
 * The official API of the BetterInternship MOA platform.
 * OpenAPI spec version: 1.0
 */
import { useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type { ErrorResponse, SchoolsResponse } from "../../models";

import { preconfiguredAxios } from "../../../../preconfig.axios";

export const entitySchoolsControllerGetMyPartners = (signal?: AbortSignal) => {
  return preconfiguredAxios<SchoolsResponse>({
    url: `/api/entity/schools/my-partners`,
    method: "GET",
    signal,
  });
};

export const getEntitySchoolsControllerGetMyPartnersQueryKey = () => {
  return [`/api/entity/schools/my-partners`] as const;
};

export const getEntitySchoolsControllerGetMyPartnersQueryOptions = <
  TData = Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntitySchoolsControllerGetMyPartnersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>
  > = ({ signal }) => entitySchoolsControllerGetMyPartners(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntitySchoolsControllerGetMyPartnersQueryResult = NonNullable<
  Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>
>;
export type EntitySchoolsControllerGetMyPartnersQueryError = ErrorResponse;

export function useEntitySchoolsControllerGetMyPartners<
  TData = Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
          TError,
          Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitySchoolsControllerGetMyPartners<
  TData = Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
          TError,
          Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitySchoolsControllerGetMyPartners<
  TData = Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntitySchoolsControllerGetMyPartners<
  TData = Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntitySchoolsControllerGetMyPartnersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getEntitySchoolsControllerGetMyPartnersSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEntitySchoolsControllerGetMyPartnersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>
  > = ({ signal }) => entitySchoolsControllerGetMyPartners(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type EntitySchoolsControllerGetMyPartnersSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>
>;
export type EntitySchoolsControllerGetMyPartnersSuspenseQueryError = ErrorResponse;

export function useEntitySchoolsControllerGetMyPartnersSuspense<
  TData = Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitySchoolsControllerGetMyPartnersSuspense<
  TData = Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useEntitySchoolsControllerGetMyPartnersSuspense<
  TData = Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useEntitySchoolsControllerGetMyPartnersSuspense<
  TData = Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof entitySchoolsControllerGetMyPartners>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getEntitySchoolsControllerGetMyPartnersSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
